" this script has been writen in utf-8 encoding
scriptencoding utf-8

"""""""""""""""""""""""""""""""""""
" Dependence
"""""""""""""""""""""""""""""""""""
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake" Bundles here are part of the core Maximum Awesome setup
" shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck

filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off " REQUIRED! ensure filetype is off

"""""""""""""""""""""""""""""""""""
" Plugin Management
"""""""""""""""""""""""""""""""""""
" inspired by spf13
" available list
" python
" javascript
" markdown
" html
" css
" less
" scss
" tmux
" common lisp
" php
if !exists('g:bundle_groups')
    let g:bundle_groups=['python', 'json', 'markdown', 'html', 'css', 'tmux']
endif

call plug#begin('~/.vim/plugged')
"""""""""""""""""""""""""""""""
" Generial {{{1
"""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""
" syntastic {{{2
"""""""""""""""""""""""""""""""
Plug 'scrooloose/syntastic'


" Group dependencies, vim-snippets depends on ultisnips
" Snippets are separated from the engine.
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"}}}

"""""""""""""""""""""""""""""""
" auto complete {{{2
"""""""""""""""""""""""""""""""
"Plug 'Valloric/YouCompleteMe'
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' , 'for': ['python', 'c', 'cpp'] }
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' }

" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim'

"Plug 'Shougo/neocomplete.vim'
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'Shougo/neosnippet'
"Plug 'Shougo/neosnippet-snippets'
"}}}

"""""""""""""""""""""""""""""""
" quick editing {{{2
"""""""""""""""""""""""""""""""
" comment
Plug 'scrooloose/nerdcommenter'
" align
Plug 'junegunn/vim-easy-align'
Plug 'vim-scripts/matchit.zip'

" Sublime alike multiple cursors supoort
Plug 'terryma/vim-multiple-cursors'

" file location
Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'

" gundo: visualize your Vim undo tree
Plug 'sjl/gundo.vim'

" endwise
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

" smart selection of the closest text object
Plug 'gcmt/wildfire.vim'

" quick f/F
Plug 'unblevable/quick-scope'

" run commands quickly
Plug 'thinca/vim-quickrun'

" ack/ag
if executable('ack') || executable('ag')
    Plug 'mileszs/ack.vim'
endif
"}}}

"""""""""""""""""""""""""""""""
" git {{{2
"""""""""""""""""""""""""""""""
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
"}}}

"""""""""""""""""""""""""""""""
" NAV {{{2
"""""""""""""""""""""""""""""""
" tagbar
if executable('ctags')
    Plug 'majutsushi/tagbar'
endif

" NERDTree
"Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'scrooloose/nerdtree'
Plug 'xuyuanp/nerdtree-git-plugin'
" I dont use tabs, uncomment if you need to make nerdtree stick through tabs
"Plug 'jistr/vim-nerdtree-tabs'

" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'
"}}}

"""""""""""""""""""""""""""""""
" UI/UX {{{2
"""""""""""""""""""""""""""""""
" rainbow parentheses
Plug 'luochen1990/rainbow'
"Plug 'junegunn/rainbow_parentheses'

" Airline
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Color schemes
Plug 'chriskempson/base16-vim'
Plug 'flazz/vim-colorschemes'
Plug 'morhetz/gruvbox'

" hilight indents
Plug 'nathanaelkane/vim-indent-guides'

" Object
Plug 'michaeljsmith/vim-indent-object'

" Keymap-display
Plug 'hecal3/vim-leader-guide'
" }}}
" }}}

" #################################
" Bundle Groups {{{1
" #################################
"""""""""""""""""""""""""""""""
" tmux {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'
endif
"}}}

"""""""""""""""""""""""""""""""
" markdown {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'markdown')
    Plug 'plasticboy/vim-markdown', {'for': 'md'}
    " https://github.com/suan/vim-instant-markdown
    " npm -g install instant-markdown-d
    " Plug 'suan/vim-instant-markdown'
    " let g:instant_markdown_slow = 1
    " let g:instant_markdown_autostart = 0
    " map <F12> :InstantMarkdownPreview<CR>
    " previews
    " markdown preview
    Plug 'junegunn/goyo.vim', { 'for': 'markdown' }

endif
"}}}

"""""""""""""""""""""""""""""""
" golang {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vim-go
    Plug 'fatih/vim-go', {'do': ':GoInstallBinaries' , 'for': 'go'}
endif
"}}}

"""""""""""""""""""""""""""""""
" python {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax'
    Plug 'hynek/vim-python-pep8-indent'
    Plug 'Glench/Vim-Jinja2-Syntax'
    "Plug 'jmcantrell/vim-virtualenv'
    "Plug 'davidhalter/jedi-vim'
    Plug 'python-mode/python-mode', {'for': 'python'}
endif
"}}}

"""""""""""""""""""""""""""""""
" php {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'php')
    Plug 'spf13/PIV'
endif
"}}}

"""""""""""""""""""""""""""""""
" ruby {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'ruby')
    Plug 'vim-ruby/vim-ruby'
    Plug 'tpope/vim-rails'
    " dir / dar
    Plug 'nelstrom/vim-textobj-rubyblock'
endif
"}}}

"""""""""""""""""""""""""""""""
" common lisp {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'common listp')
    Plug 'kovisoft/slimv'
endif
" }}}
"""""""""""""""""""""""""""""""
" json {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'json')
    " json
    Plug 'elzr/vim-json', {'for': 'json'}
endif
"}}}

"""""""""""""""""""""""""""""""
" html {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'html')
    Plug 'mattn/emmet-vim'
endif
"}}}

"""""""""""""""""""""""""""""""
" coffeescript {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'coffeescript')
    Plug 'kchmck/vim-coffee-script'
endif
"}}}

"""""""""""""""""""""""""""""""
" css {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'css')
    Plug 'ap/vim-css-color'
    Plug 'hail2u/vim-css3-syntax'
endif
"}}}

"""""""""""""""""""""""""""""""
" less {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'less')
    Plug 'groenewege/vim-less'
endif
"}}}

"""""""""""""""""""""""""""""""
" scss {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'scss')
    Plug 'cakebaker/scss-syntax.vim'
endif
"}}}

"""""""""""""""""""""""""""""""
" macos {{{2
"""""""""""""""""""""""""""""""
if count(g:bundle_groups, 'macos')
    " Dash.app ( OS X only )
    Plug 'rizzatti/dash.vim'
endif
"}}}

" Add plugins to &runtimepath
call plug#end()

"}}}

"""""""""""""""""""""""""""""""""""
" Plugin Settings {{{1
"""""""""""""""""""""""""""""""""""

" syntastic {{{2

    "let g:syntastic_error_symbol = '✘'
    let g:syntastic_error_symbol = 'X'
    "let g:syntastic_warning_symbol = '⚠'
    let g:syntastic_warning_symbol = '!'
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_enable_highlighting = 1

    """"""""""""
    " checkers
    """"""""""""
    " Python
    " error code: http://pep8.readthedocs.org/en/latest/intro.html#error-codes
    let g:syntastic_python_checkers = ['flake8'] " use flake8 as checker, :help syntastic-checkers for more options
    let g:syntastic_python_flake8_args = '--ignore=E501,E225,E124,E712'

    " VimL
    if executable('vint')
        let g:syntastic_vim_checkers = ['vint'] " use vim-vint as VimL
    endif

    " Shell
    if executable('shellcheck')
        let g:syntastic_shell_checkers = ['shellcheck'] " use shellcheck as bash script checker
    endif

    " to see error location list
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_enable_signs = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_auto_jump = 0
    let g:syntastic_loc_list_height = 5

    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic_error location panel
            Errors
        endif
    endfunction
    nnoremap <Leader>s :call ToggleErrors()<cr>

    " wrap :cnext/:cprevious and :lnext/:lprevious
    " from
    " :http://stackoverflow.com/questions/27198612/vim-location-list-how-to-go-to-first-location-if-at-last-location/27204000#27204000
    function! WrapCommand(direction, prefix)
        if a:direction ==? 'up'
            try
                execute a:prefix . 'previous'
            catch /^Vim\%((\a\+)\)\=:E553/
                execute a:prefix . 'last'
            catch /^Vim\%((\a\+)\)\=:E\%(776\|42\):/
            endtry
        elseif a:direction ==? 'down'
            try
                execute a:prefix . 'next'
            catch /^Vim\%((\a\+)\)\=:E553/
                execute a:prefix . 'first'
            catch /^Vim\%((\a\+)\)\=:E\%(776\|42\):/
            endtry
        endif
    endfunction

    " <leader>ep and <leader>en go up and down the location list and wrap around


    nnoremap <silent> <Leader>ec    <Plug>SyntasticReset
    nnoremap <silent> <Leader>eh    <Plug>SyntasticInfo
    nnoremap <silent> <leader>ep :call WrapCommand('up', 'l')<CR>
    nnoremap <silent> <leader>en  :call WrapCommand('down', 'l')<CR>

    " disable java checking
    " thanks to @marsqing, see https://github.com/wklken/k-vim/issues/164
    let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }
" }}}

" YouCompleteMe {{{2
    " make YCM work with UltiSnips
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

    let g:ycm_complete_in_comments = 1  " show the completion menu even when typing inside comments
    let g:ycm_complete_in_strings = 1   " show the completion menu even when typing inside strings

    let g:ycm_use_ultisnips_completer = 1 " query the UltiSnips plugin for possible completions
                                          " of snippet triggers. Default is 1, just ensure.
    let g:ycm_collect_identifiers_from_comments_and_strings = 1   " collect identifiers from
                                                                  " strings and comments
    let g:ycm_collect_identifiers_from_tags_files = 1 " collect identifiers from tags files

    let g:ycm_seed_identifiers_with_syntax=1

    let g:ycm_goto_buffer_command = 'horizontal-split' " goto the definition, open buffer horizontally
    nnoremap <leader>jd :YcmCompleter GoTo<CR>
    nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

    " old version
    if !empty(glob('~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'))
        let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
    endif
    " new version
    if !empty(glob('~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'))
        let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
    endif

    let g:ycm_filetype_blacklist = {
        \ 'tagbar' : 1,
        \ 'gitcommit' : 1,
        \}
" }}}


" ultisnips {{{2
    let g:UltiSnipsExpandTrigger       = '<tab>'
    let g:UltiSnipsJumpForwardTrigger  = '<tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
    let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
    " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
    " 进入对应filetype的snippets进行编辑
    map <leader>us :UltiSnipsEdit<CR>
" }}}


" delimitMate {{{2
    augroup filetype_python
        autocmd FileType python let b:delimitMate_nesting_quotes = ['"']
    augroup END
    augroup filetype_php
        autocmd FileType php let delimitMate_matchpairs = "(:),[:],{:}"
    augroup END
" }}}


" closetag {{{2
    let g:closetag_html_style=1
" }}}

" ################### Editing ###################

" nerdcommenter {{{2
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
" }}}

" vim-easy-align {{{2
    vmap <leader>a <Plug>(EasyAlign)
    nmap <leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
        let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }}}

" ################### Motion ###################

" easymotion {{{2
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    " repeat
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}


" quickscope {{{2
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
    " macvim/gvim会有问题, 暂时注解
    if has('gui_running')
        let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
    else
        let g:qs_first_occurrence_highlight_color = 154       " terminal vim
    endif
    if has('gui_running')
        let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
    else
        let g:qs_second_occurrence_highlight_color = 51         " terminal vim
    endif
" }}}

" ################### Selection ###################

" multiplecursors {{{2
    let g:multi_cursor_use_default_mapping=0
    " Default mapping
    let g:multi_cursor_next_key='<C-m>'
    let g:multi_cursor_prev_key='<C-p>'
    let g:multi_cursor_skip_key='<C-x>'
    let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlp ctrlpfunky{{{2
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>f :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window = 'order:ttb,max:20'
    let g:ctrlp_max_height=15
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1

    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    if executable('ag')
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    endif

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1

    let g:ctrlp_extensions = ['funky']
" }}}


" ctrlsf {{{2
    nmap \ <Plug>CtrlSFCwordPath<CR>
    " let g:ctrlsf_position = 'below'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ 'open'  : '<Space>',
        \ 'openb' : 'O',
        \ 'tab'   : 't',
        \ 'tabb'  : 'T',
        \ 'prevw' : 'p',
        \ 'quit'  : 'q',
        \ 'next'  : '<C-J>',
        \ 'prev'  : '<C-K>',
        \ 'pquit' : 'q',
        \ }
" }}}

" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作

" fugitive {{{2
    " :Gdiff  :Gstatus :Gvsplit
    " not ready to open
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>gl :Glog<CR>
    nnoremap <leader>gp :Gpush<CR>
    nnoremap <leader>gs :Gstatus<CR>
" }}}

" gitgutter {{{2
    " 同git diff,实时展示文件中修改的行
    " 只是不喜欢除了行号多一列, 默认关闭,gs时打开
    let g:gitgutter_map_keys = 0
    let g:gitgutter_enabled = 0
    let g:gitgutter_highlight_lines = 1
    nnoremap <leader>gg :GitGutterToggle<CR>
" }}}

" gundo {{{2
    noremap <leader>h :GundoToggle<CR>
" }}}

" ack ( default use ag if exists ) {{{2
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
" }}}

" ################### UX/UI ###################

" airline {{{2
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    let g:airline_left_sep = '❯'
    let g:airline_left_alt_sep = '〉'
    let g:airline_right_sep = '❮'
    let g:airline_right_alt_sep = '〈'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    " 是否打开tabline
    " let g:airline#extensions#tabline#enabled = 1
" }}}



" rainbow_parentheses {{{2
    let g:rainbow_active = 1
    let g:rainbow_conf = {
                \   'guifgs': ['RoyalBlue3', 'SeaGreen3', 'DarkOrchid3', 'firebrick3', 'RoyalBlue3', 'SeaGreen3', 'DarkOrchid3', 'firebrick3', 'RoyalBlue3', 'SeaGreen3', 'DarkOrchid3', 'firebrick3', 'RoyalBlue3', 'SeaGreen3', 'DarkOrchid3', 'firebrick3',],
                \   'ctermfgs': ['lightgray', 'brown','Darkblue','darkgray','darkgreen','darkcyan','darkred','darkmagenta','brown','gray','darkmagenta','Darkblue','darkgreen','darkcyan','darkred','red'],
                \   'operators': '_,_',
                \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
                \   'separately': {
                \       '*': {},
                \       'tex': {
                \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
                \       },
                \       'lisp': {
                \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
                \       },
                \       'vim': {
                \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
                \       },
                \       'html': {
                \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
                \       },
                \       'css': 0,
                \   }
                \}

    " }}}

    " vim-leader-guide
    " 

    " nerdtree {{{2
    nmap <leader>fd :NERDTreeToggle<CR>
    nmap <leader>ff :NERDTreeFind<CR>
    "map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'

    augroup nerdtree
        autocmd!
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
        autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | enew | endif
    augroup END

    " nerdtree-git-plugin
    let g:NERDTreeIndicatorMapCustom = {
        \ 'Modified'  : '✹',
        \ 'Staged'    : '✚',
        \ 'Untracked' : '✭',
        \ 'Renamed'   : '➜',
        \ 'Unmerged'  : '═',
        \ 'Deleted'   : '✖',
        \ 'Dirty'     : '✗',
        \ 'Clean'     : '✔︎',
        \ 'Unknown'   : '?'
        \ }

    " }}}


    " Vim Workspace Controller
    " ctrlspace {{{2
    let g:airline_exclude_preview = 1
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8


    " }}}


    " 标签导航
    " tagbar {{{2
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    " let g:tagbar_autoshowtag = 1
    " let g:tagbar_show_visibility = 1
    " for ruby
    let g:tagbar_type_ruby = {
                \ 'kinds' : [
                \ 'm:modules',
                \ 'c:classes',
                \ 'd:describes',
                \ 'C:contexts',
                \ 'f:methods',
                \ 'F:singleton methods'
                \ ]
                \ }

    " go语言的tagbar配置
    " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " for gotags. work with tagbar
    let g:tagbar_type_go = {
                \ 'ctagstype' : 'go',
                \ 'kinds'     : [
                \ 'p:package',
                \ 'i:imports:1',
                \ 'c:constants',
                \ 'v:variables',
                \ 't:types',
                \ 'n:interfaces',
                \ 'w:fields',
                \ 'e:embedded',
                \ 'm:methods',
                \ 'r:constructor',
                \ 'f:functions'
                \ ],
                \ 'sro' : '.',
                \ 'kind2scope' : {
                \ 't' : 'ctype',
                \ 'n' : 'ntype'
                \ },
                \ 'scope2kind' : {
                \ 'ctype' : 't',
                \ 'ntype' : 'n'
                \ },
                \ 'ctagsbin'  : 'gotags',
                \ 'ctagsargs' : '-sort -silent'
                \ }
    " }}}


    " ################### Programming ###################

    " quickrun {{{2
    let g:quickrun_config = {
                \   '_' : {
                \       'outputter' : 'message',
                \   },
                \}

    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>r <Plug>(quickrun)
    map <F10> :QuickRun<CR>
    " }}}

    " python-mode {{{2
    " Disable if python support not present
    if !has('python')
        let g:pymode = 0
    endif

    if !has('python') && !has('python3')
        let g:pymode = 0
    endif

    if isdirectory(expand('~/.vim/plugged/python-mode'))
        let g:pymode_lint_checkers = ['pyflakes']
        let g:pymode_trim_whitespaces = 0
        let g:pymode_options = 0
        let g:pymode_rope = 0
    endif
    " }}}

    " pythonsyntax {{{2
    let python_highlight_all = 1
    " }}}


    " vim-go {{{2
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_fail_silently = 1
    " let g:go_fmt_command = "goimports"
    " let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
    " }}}

    " markdown {{{2
    let g:vim_markdown_folding_disabled=1
    " }}}


    " javascript {{{2
    " pangloss/vim-javascript
    let g:html_indent_inctags = 'html,body,head,tbody'
    let g:html_indent_script1 = 'inc'
    let g:html_indent_style1 = 'inc'
    " }}}

    " json {{{2
    let g:vim_json_syntax_conceal = 0
    " }}}

    " css {{{2
    " }}}

    "}}}

    " Use local settings if available
    if filereadable(expand('~/.vimrc.bundles.local'))
        source ~/.vimrc.bundles.local
    endif

    " vim: ft=vim:fdm=marker:et:sw=4:
